import { QuizData } from '@/app/quiz/page';

interface EmailTemplateData extends QuizData {
  matchScore?: number;
  matchedStories?: Array<{
    firstName: string;
    achievement: string;
    grade?: string;
  }>;
  matchedFaculty?: Array<{
    firstName: string;
    lastName?: string;
    title: string;
    formalTitle?: string;
  }>;
  selectedTourItems?: string[];
}

interface ContactInfo {
  parentName: string;
  email: string;
  phone: string;
  studentName: string;
}

// Map characteristic IDs to readable labels
const CHARACTERISTIC_LABELS: Record<string, string> = {
  // Academic
  'curious': 'Naturally Curious',
  'focused': 'Strong Focus',
  'creative': 'Creative Thinker',
  'analytical': 'Analytical Mind',
  
  // Social
  'outgoing': 'Outgoing',
  'thoughtful': 'Thoughtful',
  'leader': 'Natural Leader',
  'collaborator': 'Team Player',
  
  // Interests
  'arts': 'Arts & Creativity',
  'sports': 'Sports & Movement',
  'stem': 'Science & Tech',
  'service': 'Helping Others',
  
  // Learning
  'hands-on': 'Hands-On Learner',
  'visual': 'Visual Learner',
  'discussion': 'Learns Through Discussion',
  'independent': 'Independent Study'
};

const GRADE_LABELS: Record<string, string> = {
  'prek-k': 'Pre-K / Kindergarten',
  'elementary': 'Elementary (1st-5th)',
  'middle': 'Middle School (6th-8th)',
  'high': 'High School (9th-12th)'
};

export function generateEmailTemplate(
  quizData: EmailTemplateData, 
  contactInfo?: ContactInfo,
  selectedTourItems?: string[]
): {
  subject: string;
  body: string;
  plainTextSummary: string;
} {
  const matchScore = quizData.matchScore || 0;
  const studentName = contactInfo?.studentName || 'Student';
  const parentName = contactInfo?.parentName || '';
  
  // Format characteristics
  const characteristics = (quizData.selectedCharacteristics || [])
    .map(id => CHARACTERISTIC_LABELS[id] || id)
    .join(', ');
  
  // Format interests
  const interests = (quizData.interests || []).join(', ');
  
  // Format family values
  const values = (quizData.familyValues || []).join(', ');
  
  // Format grade level
  const gradeLevel = quizData.gradeLevel ? GRADE_LABELS[quizData.gradeLevel] : 'Not specified';
  
  // Format matched stories
  const topStory = quizData.matchedStories?.[0];
  const storyText = topStory ? 
    `📖 Top Student Match: ${topStory.firstName} - ${topStory.achievement}` : 
    '';
  
  // Format matched faculty
  const topFaculty = quizData.matchedFaculty?.[0];
  const facultyText = topFaculty ? 
    `👨‍🏫 Faculty Match: ${topFaculty.firstName} ${topFaculty.lastName || ''} (${topFaculty.title})`.replace('  ', ' ') : 
    '';
  
  // Format tour interests
  const tourItemsText = selectedTourItems && selectedTourItems.length > 0 ? 
    `🏫 Tour Focus Areas:\n${selectedTourItems.map(item => `• ${item}`).join('\n')}` : 
    '';
  
  // Create subject line
  const subject = `Tour Request - ${studentName} (${matchScore}% match)`;
  
  // Create email body
  const body = `Subject: ${subject}

Hello Saint Stephen's Admissions Team,

We just completed the "Had Me At Hello" quiz and would love to schedule a personalized tour!

📊 QUIZ RESULTS SUMMARY
${matchScore > 0 ? `• Match Score: ${matchScore}%` : ''}
• Grade Level: ${gradeLevel}
• Timeline: ${quizData.timeline || 'Not specified'}

👤 ABOUT ${studentName.toUpperCase()}
${characteristics ? `• Key Traits: ${characteristics}` : ''}
${interests ? `• Interests: ${interests}` : ''}
${values ? `• Family Values: ${values}` : ''}
${quizData.additionalNotes ? `• Additional Notes: ${quizData.additionalNotes}` : ''}
${quizData.childDescription ? `• Parent Description: ${quizData.childDescription}` : ''}

${storyText}
${facultyText}

${tourItemsText}

👨‍👩‍👧‍👦 CONTACT INFORMATION
${parentName ? `• Parent: ${parentName}` : ''}
${contactInfo?.email ? `• Email: ${contactInfo.email}` : ''}
${contactInfo?.phone ? `• Phone: ${contactInfo.phone}` : ''}

We're excited to learn more about Saint Stephen's and see how it might be the perfect fit for ${studentName}!

Best regards,
${parentName || 'The Family'}

---
Generated by Had Me At Hello - visit.saintstephens.org`;

  // Create plain text summary (for copy/paste)
  const plainTextSummary = `${studentName} - ${matchScore}% Match
Grade: ${gradeLevel} | Timeline: ${quizData.timeline || 'TBD'}
Traits: ${characteristics || 'None selected'}
${quizData.additionalNotes ? `Notes: ${quizData.additionalNotes}` : ''}
${tourItemsText ? `\n${tourItemsText}` : ''}`;

  return {
    subject,
    body,
    plainTextSummary
  };
}

export function generateAdmissionsChecklist(
  quizData: EmailTemplateData,
  contactInfo?: ContactInfo
): string {
  const studentName = contactInfo?.studentName || 'Student';
  const characteristics = (quizData.selectedCharacteristics || [])
    .map(id => CHARACTERISTIC_LABELS[id] || id);
  
  const checklist = `
ADMISSIONS CHECKLIST - ${studentName}

□ ACADEMIC PROFILE
  Grade Level: ${quizData.gradeLevel ? GRADE_LABELS[quizData.gradeLevel] : 'TBD'}
  Current Situation: ${quizData.currentSituation || 'Not specified'}

□ STUDENT CHARACTERISTICS
${characteristics.length > 0 ? 
  characteristics.map(trait => `  □ ${trait}`).join('\n') : 
  '  □ No traits selected'
}

□ INTERESTS & VALUES
  Interests: ${(quizData.interests || []).join(', ') || 'None specified'}
  Family Values: ${(quizData.familyValues || []).join(', ') || 'None specified'}

□ TIMELINE
  ${quizData.timeline || 'Not specified'}

□ ADDITIONAL NOTES
  ${quizData.additionalNotes || 'None provided'}

□ MATCHED RECOMMENDATIONS
${quizData.matchedStories?.slice(0, 2).map(story => 
  `  □ Show ${story.firstName}'s story (${story.achievement})`
).join('\n') || '  □ No story matches'}

${quizData.matchedFaculty?.slice(0, 2).map(faculty => 
  `  □ Introduce to ${faculty.formalTitle || 'Mr./Ms.'} ${faculty.lastName || ''} (${faculty.title})`.replace('  ', ' ')
).join('\n') || '  □ No faculty matches'}

□ FOLLOW-UP ACTIONS
  □ Tour scheduled
  □ Application materials sent
  □ Follow-up meeting planned
`;

  return checklist.trim();
}

// Helper function to copy to clipboard
export async function copyToClipboard(text: string): Promise<boolean> {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (err) {
    console.error('Failed to copy to clipboard:', err);
    return false;
  }
}
